// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mailroom.Migrations
{
    [DbContext(typeof(MailroomDbContext))]
    partial class MailroomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mailroom.Models.Packages", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PackageId"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Delivered")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeliveredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PickedUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PackageId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("Packages_UserId_index")
                        .HasAnnotation("Relational:Comment", "Foreign key index for UserId");

                    b.HasIndex("Delivered", "DeliveredDate")
                        .HasDatabaseName("Packages_Delivered_DeliveredDate_index")
                        .HasAnnotation("Relational:Comment", "Used on the admin side...");

                    b.HasIndex("Delivered", "UserId")
                        .HasDatabaseName("Packages_Delivered_UserId_index")
                        .HasAnnotation("Relational:Comment", "Used for the resident side");

                    b.HasIndex("UserId", "DeliveredDate")
                        .HasDatabaseName("Packages_UserId_DeliveredDate_index")
                        .HasAnnotation("Relational:Comment", "Used for the user detail page");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Mailroom.Models.UnknownPackage", b =>
                {
                    b.Property<int>("UnknownPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnknownPackageId"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DeliveredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UnknownPackageId");

                    b.ToTable("UnknownPackages");
                });

            modelBuilder.Entity("Mailroom.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Building")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Unit")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("Users_email_uindex")
                        .HasAnnotation("Relational:Comment", "Requires emails to be unique");

                    b.HasIndex("Role")
                        .HasDatabaseName("Users_Role_index")
                        .HasAnnotation("Relational:Comment", "Keep track of roles...");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Mailroom.Models.Packages", b =>
                {
                    b.HasOne("Mailroom.Models.User", "User")
                        .WithMany("Packages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mailroom.Models.User", b =>
                {
                    b.Navigation("Packages");
                });
#pragma warning restore 612, 618
        }
    }
}
